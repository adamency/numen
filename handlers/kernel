#!/bin/sh
export NUMEN_HANDLER=kernel

alias print='printf %s\\n'
alias shell='${NUMEN_SHELL:-/bin/sh}'

# Returns whether $1 starts with $2.
prefixed() { [ "${1#$2}" != "$1" ]; }

# $1 is the fallback if keyboard LEDs can't be queried.
iscapson() {
	if states="$(cat /sys/class/leds/input*::capslock/brightness 2> /dev/null)"; then
		set -- "$(print "$states" | awk '{ sum += $0 }; END { print sum != 0 }')"
	fi
	[ "$1" = 1 ]; return
}
iscapsoff() {
	if states="$(cat /sys/class/leds/input*::capslock/brightness 2> /dev/null)"; then
		set -- "$(print "$states" | awk '{ sum += $0 }; END { print sum != 0 }')"
	fi
	[ "$1" != 1 ]; return
}

export NUMEN_KEY_DELAY="${NUMEN_KEY_DELAY:-2}"
export NUMEN_KEY_HOLD="${NUMEN_KEY_HOLD:-8}"
export NUMEN_TYPE_DELAY="${NUMEN_TYPE_DELAY:-2}"
export NUMEN_TYPE_HOLD="${NUMEN_TYPE_HOLD:-8}"
mydotool() {
	{
		print "keydelay $NUMEN_KEY_DELAY"
		print "keyhold $NUMEN_KEY_HOLD"
		print "typedelay $NUMEN_TYPE_DELAY"
		print "typehold $NUMEN_TYPE_HOLD"
		cat
	} | dotool
}

caps=0
while IFS= read -r line; do
	line="${line#local}"
	if prefixed "$line" key; then
		print "$line" | sed 's/[ +]/&x:/g; s/x:\([a-z]*+\)/\1/g'
	elif prefixed "$line" type; then
		export NUMEN_TEXT="${line#type }"
		print "$line"
	elif [ "$line" = capson ]; then
		iscapsoff "$caps" && caps=1 && echo 'key capslock'
	elif [ "$line" = capsoff ]; then
		iscapson "$caps" && caps=0 && echo 'key capslock'
	elif [ "$line" = scrollup ]; then
		print 'scroll -1'
	elif [ "$line" = scrolldown ]; then
		print 'scroll 1'
	elif prefixed "$line" pen; then
		export NUMEN_TEXT="$(shell -c "${line#pen }")"
		print "$NUMEN_TEXT" | sed 's/^/type /; 1 !s/^/key Return\n/'
	elif prefixed "$line" eval; then
		shell -c "${line#eval }" > "$NUMEN_PIPE"
	elif prefixed "$line" set; then
		line="${line#set }"
		value="$(shell -c "${line#* }")"
		if [ "${line%% *}" = NUMEN_KEY_DELAY ]; then
			print "keydelay $value"
		elif [ "${line%% *}" = NUMEN_KEY_HOLD ]; then
			print "keyhold $value"
		elif [ "${line%% *}" = NUMEN_TYPE_DELAY ]; then
			print "typedelay $value"
		elif [ "${line%% *}" = NUMEN_TYPE_HOLD ]; then
			print "typehold $value"
		fi
		export -- "${line%% *}=$value"
	elif prefixed "$line" handler; then
		exec "/usr/libexec/numen/handlers/${line#handler }"
	else
		print "$line"
	fi
done | if ! mydotool; then
	if ! : | mydotool 2> /dev/null; then
		echo 'numen: Failed to create the input device, you might not have the permissions.
Make sure you are in group input (see: id -Gn) and run: sudo udevadm trigger
The command reloads the udev rule installed with numen, alternatively you can reboot.

If you are not in group input, you can add yourself by running:

	sudo usermod -a -G input $USER

and then re-login.
' >&2
	fi
fi

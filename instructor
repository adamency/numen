#! ./awk -f
# Simplifies actions for the handlers.

BEGIN {
	ModDir = ENVIRON["HOME"]"/.local/share/numen/mods"
	if (length(ENVIRON["XDG_DATA_HOME"])) ModDir = ENVIRON["XDG_DATA_HOME"]"/numen/mods"

	Mods["shift"] = Mods["ctrl"] = Mods["alt"] = Mods["super"] = 0
	for (m in Mods) setmod(m, 0)

	Sticky = 0
	Prev = ""
	PrevPress = PrevType = PrevPen = PrevEval = PrevLocalPen = PrevLocalEval = ""
}

function warn(msg) {
	print "WARNING: "msg > "/dev/stderr"
}

function max(a, b) {
	return a > b ? a : b
}
function min(a, b) {
	return a < b ? a : b
}

function setmod(mod, state) {
	Mods[mod] = state
	system("echo "state" > "ModDir"/"m)
	print "set NUMEN_"toupper(mod)" echo "state
}

function modstr(    s,m) {
	for (m in Mods) if (Mods[m]) s = s m "+"
	return s
}

{
for (;;) {
	was = $0

	if (sub(/^[ \t]*press[ \t]/, " ")) {
		sub(/[ \t]+$/, "")
		gsub(/[ \t]+/, " "modstr())
		for (m in Mods) setmod(m, 0)
		print "key" (Sticky ? "down" : "") $0
		fflush()
		Prev = "press"
		PrevPress = $0
		next
	}

	if ($1 == "mod") {
		if ($2 in Mods) {
			setmod($2, 1)
		} else if ($2 == "clear") {
			for (m in Mods) setmod(m, 0)
		} else {
			warn("invalid modifier: " $0)
		}
		$1 = $2 = ""; $0 = $0
	}

	if ($1 == "capson" || $1 == "capsoff") {
		print $1
		fflush()
		$1 = ""; $0 = $0
	}

	if ($1 == "stick" || $1 == "unstick") {
		if (length(PrevPress)) {
			print "keyup " PrevPress
			fflush()
		}
		Sticky = $1 == "stick"
		$1 = ""; $0 = $0
	}

	if (sub(/^[ \t]*type[ \t]/, "")) {
		print "type " $0
		fflush()
		PrevType = $0
		next
	}

	if ($1 == "mousemove") {
		if ($2 ~ /^[0-9.]+$/ && $3 ~ /^[0-9.]+$/) {
			print $1, int($2), int($3)
			fflush()
		} else {
			warn("invalid number: " $0)
		}
		$1 = $2 = $3 = ""; $0 = $0
	}

	if ($1 == "mouseto") {
		if ($2 ~ /^[0-9.]+$/ && $3 ~ /^[0-9.]+$/) {
			if ($2 < 0.0 || $2 > 1.0 || $3 < 0.0 || $3 > 1.0) {
				warn("clamping percentages between 0.0 and 1.0: " $0)
				$2 = max(0.0, min($2, 1.0))
				$3 = max(0.0, min($3, 1.0))
			}
			print $1, $2, $3
			fflush()
		} else {
			warn("invalid coordinate: " $0)
		}
		$1 = $2 = $3 = ""; $0 = $0
	}

	if ($1 == "click") {
		if ($2 == "left" || $2 == "right" || $2 == "scrollup" || $2 == "scrolldown") {
			print "click " $2
			fflush()
		} else {
			warn("invalid mouse button: " $0)
		}
		$1 = $2 = ""; $0 = $0
	}

	if (sub(/^[ \t]*pen[ \t]/, "")) {
		print "pen " $0
		fflush()
		Prev = "pen"
		PrevPen = $0
		next
	}

	if (sub(/^[ \t]*eval[ \t]/, "")) {
		print "eval " $0
		fflush()
		Prev = "eval"
		PrevEval = $0
		next
	}

	if (sub(/^[ \t]*localpen[ \t]/, "")) {
		print "localpen " $0
		fflush()
		Prev = "localpen"
		PrevLocalPen = $0
		next
	}

	if (sub(/^[ \t]*localeval[ \t]/, "")) {
		print "localeval " $0
		fflush()
		Prev = "localeval"
		PrevLocalEval = $0
		next
	}

	if ($1 == "repeat") {
		if ($2 ~ /[0-9]+/) {
			if (Prev == "press") {
				for (; $2; $2--) print "key" (Sticky ? "down " : " ") PrevPress
			} else if (Prev == "pen") {
				print "pen " PrevPen
			} else if (Prev == "eval") {
				print "eval " PrevEval
			} else if (Prev == "localpen") {
				print "localpen " PrevLocalPen
			} else if (Prev == "localeval") {
				print "localeval " PrevLocalEval
			}
			fflush()
		} else {
			warn("invalid number: " $0)
		}
		$1 = $2 = ""; $0 = $0
	}

	if ($1 == "set") {
		if (substr($2, 1, 1) !~ /[0-9]/ && $2 ~ /^[_A-Za-z0-9]+$/) {
			print
			fflush()
		} else {
			warn("invalid environment variable name: " $0)
		}
		next
	}

	if ($1 == "handler") {
		if ($2 == "kernel" || $2 == "x11") {
			for (m in Mods) setmod(m, 0)
			print "handler " $2
			fflush()
		} else {
			warn("invalid handler: " $0)
		}
		$1 = $2 = ""; $0 = $0
	}

	if ($0 != was) continue
	if (! /^[ \t]*$/) warn("skipping: " $0)
	fflush()
	next
}
}
